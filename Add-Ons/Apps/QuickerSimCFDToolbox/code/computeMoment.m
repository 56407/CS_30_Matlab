function [Mtotal, Mviscous] = computeMoment(p, e, t, u, nu, wallIds, Point, varargin)

% computeMoment - Compute moment of force acting on given faces.
%
% This QuickerSim CFD Toolbox function calculates both total and viscous
% part of the force moment acting from fluid on the boundary given by
% edgeIds. Results should be multiplied by fluid density to represent
% values in Newton*meter.
%
% For 2-D:
% [Mtotal, Mviscous] = computeMoment(p, e, t, u, nu, wallIds, Point);
%
% For 3-D:
% [Mtotal, Mviscous] = computeMoment(p, e, t, u, nu, wallIds, Point, vec);
%
% Input arguments:
% p, e, t - arrays which store computational mesh (all details of  the PET
%     mesh format described in help for importMeshGmsh function).
% u - a column vector with solution to the velocity and pressure field.
% nu - kinematic viscosity value in one of two formats:
%     1. a scalar value constant in the whole domain,
%     2. a vector of nu values for each node in the mesh.
% wallIds - row vector of wall ids on which the moment should be computed.
% Point - For 2-D:
%           * a two-element row vector of x and y coordinate of the point
%             about which the moment value should be calculated.
%         For 3-D:
%           * a three element row vector with x, y and z coordinates of a
%             point lying on rotation axis.
% vec - used only in 3-D to specify direction of the rotation axis. vec
%       contains components pointing tangentially to the axis direction.
% 
% Output arguments:
% Mtotal - value of the total moment resulting from both pressure and
%     viscous forces.
% Mviscous - value of the moment generated by the viscous part of forces.
%     Hence, the moment value resulting from only pressure forces can be
%     computed as Mtotal-Mviscous.
%
% Examples:
%       Calculate moment acting on wall composed from edges 5 and 7 about
%       point P = (2.5, 0.5) in 2-D
%       M = computeMoment(p, e, t, u, nu, [5 7], [2.5 0.5]);
% 
%       Calculate in 3-D moment acting on walls 5 and 7 about an axis
%       parallel to y-axis which passes through point (x,y,z) = (3,4,0)
%       M = computeMoment(p,e,t,u,nu,[5 7],[3 4 0],[0 1 0]);
%
% Visit www.quickersim.com/cfd-toolbox-for-matlab/index for more info, help
% and support. Contact us by cfdtoolbox@quickersim.com
%
% See also: BOUNDARYINTEGRAL2D, BOUNDARYFLUX2D, COMPUTEFORCE,
%           EXTRACTDATAALONGLINE, EXTRACTNODEIDSONEDGES, IMPORTMESHGMSH.

% % Old version
% % Compute pressure force
% pressure = generatePressureData(u, p, t);
% ry = p(2,:)'-aboutPoint(2);
% rx = p(1,:)'-aboutPoint(1);
% momentField = [-pressure.*ry; pressure.*rx];
% Mpressure = boundaryFlux2D(p,e,momentField,edgeIds);
% %disp(Mpressure);
% 
% % Compute viscous force
% nnodes = size(p,2);
% ugrad = solutionGradient2D(p,t,u(1:nnodes));
% vgrad = solutionGradient2D(p,t,u(nnodes+1:2*nnodes));
% 
% if(length(nu)==1)
%     nu = repmat(nu,nnodes,1);
% end
% 
% f1 = [nu.*ugrad(:,1).*ry; nu.*ugrad(:,2).*ry];
% f2 = [-nu.*vgrad(:,1).*rx; -nu.*vgrad(:,2).*rx];

% 
% %norm(vgrad(:,2))
% %mean(vgrad(:,2))
% %vgrad(:,2)
% 
% Mx_viscous = boundaryFlux2D(p,e,f1,edgeIds);
% My_viscous = boundaryFlux2D(p,e,f2,edgeIds);
% 
% Mviscous = Mx_viscous + My_viscous;
% Mtotal = Mpressure + Mviscous;

dim = size(p,1);

if(dim == 2)
    % Compute pressure force
    pressure = generatePressureData(u, p, t);
    ry = p(2,:)'-Point(2);
    rx = p(1,:)'-Point(1);
    momentField = [-pressure.*ry; pressure.*rx];
    Mpressure = boundaryFlux2D(p,e,momentField,wallIds);

    % Compute viscous force
    nnodes = size(p,2);
    ugrad = solutionGradient2D(p,t,u(1:nnodes));
    vgrad = solutionGradient2D(p,t,u(nnodes+1:2*nnodes));
    
    % -p*n+2*nu*D*n
    D11 = ugrad(:,1);
    D12 = 0.5*(ugrad(:,2)+vgrad(:,1));
    D21 = D12;
    D22 = vgrad(:,2);

    if(length(nu)==1)
        nu = repmat(nu,nnodes,1);
    end
    
    f = [-2*nu.*(D21.*rx-D11.*ry); -2*nu.*(D22.*rx-D12.*ry)];
    %Mviscous = boundaryFlux2D(p,e,f,wallIds,'normalVector');
    Mviscous = boundaryFlux2D(p,e,f,wallIds);
    
    Mtotal = Mpressure + Mviscous;
else % 3-D
    % Compute pressure force
    nnodes = size(p,2);
    pressure = generatePressureData(u,p,t);
    rx = p(1,:)'-Point(1);
    ry = p(2,:)'-Point(2);
    rz = p(3,:)'-Point(3);
    momentFieldx = [zeros(nnodes,1); -pressure.*rz; pressure.*ry];
    momentFieldy = [pressure.*rz; zeros(nnodes,1); -pressure.*rx];
    momentFieldz = [-pressure.*ry; pressure.*rx; zeros(nnodes,1)];
    Mpx = boundaryIntegral(p,e,momentFieldx,wallIds);
    Mpy = boundaryIntegral(p,e,momentFieldy,wallIds);
    Mpz = boundaryIntegral(p,e,momentFieldz,wallIds);
    
    % Compute viscous force from n*(2*mu*D)
    ugrad = solutionGradient(p,t,u(1:nnodes));
    vgrad = solutionGradient(p,t,u((nnodes+1):(2*nnodes)));
    wgrad = solutionGradient(p,t,u((2*nnodes+1):(3*nnodes)));
    
    % -p*n + n*2*mu*D
    D11 = ugrad(:,1);
    D12 = 0.5*(ugrad(:,2)+vgrad(:,1));
    D13 = 0.5*(ugrad(:,3)+wgrad(:,1));
    D21 = D12;
    D22 = vgrad(:,2);
    D23 = 0.5*(vgrad(:,3)+wgrad(:,2));
    D31 = D13;
    D32 = D23;
    D33 = wgrad(:,3);
    
    if(length(nu)==1)
        nu = repmat(nu,nnodes,1);
    end
    
    fx = 2*[nu.*(ry.*D31-rz.*D21); nu.*(ry.*D32-rz.*D22); nu.*(ry.*D33-rz.*D23)];
    fy = 2*[nu.*(rz.*D11-rx.*D31); nu.*(rz.*D12-rx.*D32); nu.*(rz.*D13-rx.*D33)];
    fz = 2*[nu.*(rx.*D21-ry.*D11); nu.*(rx.*D22-ry.*D12); nu.*(rx.*D23-ry.*D13)];
    
    % Mx = boundaryFlux(p,e,fx,wallIds,'normalVector');
    % My = boundaryFlux(p,e,fy,wallIds,'normalVector');
    % Mz = boundaryFlux(p,e,fz,wallIds,'normalVector');
    
	Mx = boundaryFlux(p,e,fx,wallIds);
    My = boundaryFlux(p,e,fy,wallIds);
    Mz = boundaryFlux(p,e,fz,wallIds);
	
    axisvector = varargin{1};
    LA = norm(axisvector);
    axisvector = axisvector/LA;
    Mviscous = [Mx My Mz]*axisvector';
    Mpressure = [Mpx Mpy Mpz]*axisvector';
    Mtotal = Mpressure+Mviscous;
end

end